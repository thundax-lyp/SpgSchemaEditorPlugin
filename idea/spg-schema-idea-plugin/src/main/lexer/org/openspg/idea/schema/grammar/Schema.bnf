{
    parserClass="org.openspg.idea.schema.lang.parser.SchemaParser"
    parserUtilClass="org.openspg.idea.schema.grammar.SchemaParserUtil"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Schema"
    psiImplClassSuffix="Impl"
    psiPackage="org.openspg.idea.schema.lang.psi"
    psiImplPackage="org.openspg.idea.schema.lang.psi.impl"

    elementTypeHolderClass="org.openspg.idea.schema.grammar.psi.SchemaTypes"
    elementTypeClass="org.openspg.idea.schema.SchemaElementType"
    tokenTypeClass="org.openspg.idea.schema.psi.SchemaTokenType"

    psiImplUtilClass="org.openspg.idea.schema.psi.impl.SchemaPsiImplUtil"
}

schemaFile ::= item_*

private item_ ::= namespace|entity|COMMENT|LINE_COMMENT|indents_

private indents_ ::= INDENT|INDENT_META|INDENT_PROP|INDENT_PROPMETA|INDENT_SUBPROP|INDENT_SUBPROPMETA | DOUBLE_LBRACKET | DOUBLE_RBRACKET

namespace ::= NAMESPACE_KEYWORD IDENTIFIER {
    methods=[getNamespace toJson]
}

/**
 * Basic Element declaration
 * Example:
 */
// Example:
// Chunk(文本块): EntityType
// BigChunk("大文本块"): StandardType.Text
// MultiChunk("多个文本块") -> Chunk, BigChunk
basic_structure_declaration ::= structure_name_declaration LPARENTH structure_alias_declaration RPARENTH structure_type_declaration {
    methods=[getName toJson]
}

structure_name_declaration ::= structure_name
structure_name ::= IDENTIFIER

structure_alias_declaration ::= structure_alias
structure_alias ::= (IDENTIFIER | STRING_LITERAL | TEXT)+

// : EntityType
// -> EntityType, ConceptType, MyType:
structure_type_declaration ::= basic_structure_type_declaration | inherited_structure_type_declaration {
    methods=[getTypes]
}

basic_structure_type_declaration ::= COLON basic_structure_type_variable
basic_structure_type_variable ::= knowledge_structure_type | basic_structure_type | standard_structure_type | variable_structure_type

inherited_structure_type_declaration ::= RIGHT_ARROW (inherited_structure_type_variable COMMA)* inherited_structure_type_variable COLON
inherited_structure_type_variable ::= knowledge_structure_type | standard_structure_type | variable_structure_type

knowledge_structure_type ::= ENTITY_TYPE_KEYWORD | CONCEPT_TYPE_KEYWORD | EVENT_TYPE_KEYWORD
basic_structure_type ::= (BASIC_TYPE_KEYWORD DOT)? (INTEGER_KEYWORD | FLOAT_KEYWORD | TEXT_KEYWORD)
standard_structure_type ::= STANDARD_TYPE_KEYWORD DOT IDENTIFIER
variable_structure_type ::= structure_name {
   methods=[getReference]
}

/**
 * Basic Key-Value Property declaration
 * Example:
 * desc:
 * desc: 文本块
 * desc: [[ plain text... ]]
 */
basic_property_declaration ::= property_name_declaration COLON property_value_declaration? {
    methods=[getName getValue toJson]
}

property_name_declaration ::= property_name_variable
property_name_variable ::= builtin_property_name | IDENTIFIER
builtin_property_name ::= DESC_KEYWORD | PROPERTIES_KEYWORD | RELATIONS_KEYWORD | HYPERNYMP_PREDICATE_KEYWORD | REGULAR_KEYWORD | SPREADABLE_KEYWORD | AUTORELATE_KEYWORD | CONSTRAINT_KEYWORD | RULE_KEYWORD | INDEX_KEYWORD

property_value_declaration ::= property_value_variable
property_value_variable ::= builtin_property_value | plain_text_block | TEXT+
builtin_property_value ::= IS_A_KEYWORD | LOCATE_AT_KEYWORD | MANNER_OF_KEYWORD | TEXT_KEYWORD | VECTOR_KEYWORD | TEXT_AND_VECTOR_KEYWORD | NOT_NULL_KEYWORD | MULTI_VALUE_KEYWORD
plain_text_block ::= DOUBLE_LBRACKET PLAIN_TEXT* DOUBLE_RBRACKET {
    mixin="org.openspg.idea.schema.psi.impl.SchemaPlainTextBlockBase"
    implements="com.intellij.psi.PsiLanguageInjectionHost"
    methods=[getInjectTextRange]
}


/**
 * Entity
 * Example:
 * Chunk(文本块): EntityType
 * Chunk(文本块)->EntityType, ConceptType:
 */
entity ::= entity_head entity_body? {
    methods=[getName isBodyEmpty toJson]
}

entity_head ::= basic_structure_declaration {
    mixin="org.openspg.idea.schema.psi.impl.SchemaNamedElementImpl"
    implements="org.openspg.idea.schema.psi.SchemaNamedElement"
    methods=[getName setName getNameIdentifier]
}

entity_body ::= entity_meta+

/**
 * EntityMeta
 * Example:
 * Chunk(文本块): EntityType
 *     desc: 文本块
 */
entity_meta ::= entity_meta_head entity_meta_body? {
    methods=[isBodyEmpty toJson]
}
entity_meta_head ::= INDENT_META basic_property_declaration
entity_meta_body ::= property+

/**
 * Property
 * Example:
 * Chunk(文本块): EntityType
 *     properties :
 *         belongTo(属于) : Story
 */
property ::= property_head property_body? {
    methods=[isBodyEmpty toJson]
}
property_head ::= INDENT_PROP basic_structure_declaration
property_body ::= property_meta+

/**
 * PropertyMeta
 * Example:
 * Chunk(文本块): EntityType
 *     properties :
 *         belongTo(属于) : Story
 *             desc: 属于
 */
property_meta ::= property_meta_head property_meta_body? {
    methods=[toJson]
}
property_meta_head ::= INDENT_PROPMETA basic_property_declaration
property_meta_body ::= sub_property+

/**
 * SubProperty
 * Example:
 * Disease(疾病): EntityType
 *     properties:
 *         commonSymptom(常见症状): Symptom
 *             properties:
 *                 desc(描述): Text
 */
sub_property ::= sub_property_head sub_property_body? {
    methods=[toJson]
}
sub_property_head ::= (INDENT_SUBPROP basic_structure_declaration) {
    methods=[getPropertyName getPropertyAliasName getPropertyClassList]
}
sub_property_body ::= sub_property_meta+

/**
 * SubPropertyMeta
 * Example:
 * Disease(疾病): EntityType
 *     properties:
 *         commonSymptom(常见症状): Symptom
 *             properties:
 *                 desc(描述): Text
 *                     index: Text
 */
sub_property_meta ::= (INDENT_SUBPROPMETA basic_property_declaration) {
    methods=[getName getValue toJson]
}

